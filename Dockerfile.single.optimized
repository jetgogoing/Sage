# Sage MCP Single Container - Optimized (<1GB)
# Multi-stage build for minimal size

# Stage 1: PostgreSQL builder
FROM postgres:16-alpine AS postgres-builder

# Install pgvector extension
RUN apk add --no-cache \
    build-base \
    postgresql-dev \
    git \
    && cd /tmp \
    && git clone --branch v0.5.1 https://github.com/pgvector/pgvector.git \
    && cd pgvector \
    && make \
    && make install

# Stage 2: Python dependencies
FROM python:3.10-alpine AS python-builder

# Install build dependencies
RUN apk add --no-cache \
    gcc \
    musl-dev \
    postgresql-dev \
    libffi-dev

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy and install minimal requirements
WORKDIR /app
COPY requirements-minimal.txt .
RUN pip install --no-cache-dir -r requirements-minimal.txt

# Stage 3: Final runtime image
FROM python:3.10-alpine

# Install runtime dependencies only
RUN apk add --no-cache \
    postgresql16 \
    postgresql16-contrib \
    su-exec \
    bash \
    && mkdir -p /run/postgresql \
    && chown postgres:postgres /run/postgresql \
    || (apk add --no-cache postgresql postgresql-contrib su-exec bash \
    && mkdir -p /run/postgresql \
    && chown postgres:postgres /run/postgresql)

# Copy PostgreSQL with pgvector from builder
COPY --from=postgres-builder /usr/lib/postgresql/16/lib/pgvector.so /usr/lib/postgresql16/lib/
COPY --from=postgres-builder /usr/share/postgresql/16/extension/pgvector* /usr/share/postgresql16/extension/

# Copy Python virtual environment from builder
COPY --from=python-builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create non-root user
RUN adduser -D -s /bin/bash sage \
    && mkdir -p /var/log/sage /var/lib/sage \
    && chown -R sage:sage /var/log/sage /var/lib/sage

# Set up PostgreSQL
RUN mkdir -p /var/lib/postgresql/data \
    && chown -R postgres:postgres /var/lib/postgresql \
    && chmod 750 /var/lib/postgresql/data

# Copy application code
WORKDIR /app
COPY sage_core /app/sage_core
COPY sage_mcp_stdio_single.py /app/

# Copy initialization scripts
COPY docker/single/init-db.sql /docker-entrypoint-initdb.d/
COPY docker/single/entrypoint-optimized.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# PostgreSQL configuration
RUN echo "local all all trust" > /etc/postgresql/postgresql.conf \
    && echo "host all all 127.0.0.1/32 trust" >> /etc/postgresql/postgresql.conf \
    && echo "host all all ::1/128 trust" >> /etc/postgresql/postgresql.conf \
    && echo "listen_addresses = 'localhost'" >> /etc/postgresql/postgresql.conf \
    && echo "shared_preload_libraries = 'pgvector'" >> /etc/postgresql/postgresql.conf

# Environment variables
ENV PGDATA=/var/lib/postgresql/data \
    SAGE_DB_HOST=localhost \
    SAGE_DB_PORT=5432 \
    SAGE_DB_NAME=sage \
    SAGE_DB_USER=sage \
    SAGE_DB_PASSWORD=sage \
    SAGE_LOG_DIR=/var/log/sage \
    SAGE_USE_HASH_VECTORIZER=true \
    PYTHONUNBUFFERED=1

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD pg_isready -h localhost -p 5432 -U sage -d sage || exit 1

# Entry point
ENTRYPOINT ["/entrypoint.sh"]