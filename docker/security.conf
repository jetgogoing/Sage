# Sage MCP 安全配置文件
# 此文件定义容器安全策略、用户权限和访问控制

# ===========================================
# 容器运行安全策略
# ===========================================

# 1. 非root用户运行
# 容器内使用专用用户运行服务，避免使用root权限
# 用户ID: 1001 (sage)
# 组ID: 1001 (sage)

# 2. 文件系统权限
# 应用目录: /app (755)
# 数据目录: /var/lib/postgresql/data (700)
# 日志目录: /var/log/sage (755)
# 配置目录: /app/config (644)

# ===========================================
# 数据库安全配置
# ===========================================

# PostgreSQL用户权限策略:
# 1. 创建专用应用用户 (非superuser)
# 2. 限制数据库访问权限
# 3. 禁用不必要的扩展和函数

# 推荐的用户权限设置:
# CREATE USER sage WITH PASSWORD 'strong_password_here';
# GRANT CONNECT ON DATABASE sage_memory TO sage;
# GRANT USAGE ON SCHEMA public TO sage;
# GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO sage;
# GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO sage;

# 密码安全要求:
# - 最少12位字符
# - 包含大小写字母、数字、特殊字符
# - 定期更换（建议90天）
# - 使用环境变量存储，避免硬编码

# ===========================================
# 环境变量安全管理
# ===========================================

# 敏感信息环境变量:
# - DB_PASSWORD: 数据库密码
# - POSTGRES_PASSWORD: PostgreSQL管理员密码
# - SILICONFLOW_API_KEY: API密钥
# - JWT_SECRET: JWT签名密钥（如果使用）

# 安全存储方式:
# 1. 开发环境: .env文件（添加到.gitignore）
# 2. 生产环境: Docker secrets或外部密钥管理系统
# 3. CI/CD环境: 加密的环境变量

# Docker Secrets使用示例:
# echo "strong_password" | docker secret create db_password -
# 在docker-compose.yml中引用:
# secrets:
#   - db_password
# environment:
#   - DB_PASSWORD_FILE=/run/secrets/db_password

# ===========================================
# 容器安全加固
# ===========================================

# 1. 资源限制 (在docker-compose.yml中配置):
# deploy:
#   resources:
#     limits:
#       cpus: '1.0'
#       memory: 1G
#     reservations:
#       cpus: '0.5'
#       memory: 512M

# 2. 只读文件系统 (除必要的可写目录):
# read_only: true
# tmpfs:
#   - /tmp
#   - /var/run

# 3. 禁用特权模式:
# privileged: false
# user: "1001:1001"

# 4. 安全选项:
# security_opt:
#   - no-new-privileges:true
#   - apparmor:docker-default

# 5. Capabilities限制:
# cap_drop:
#   - ALL
# cap_add:
#   - CHOWN
#   - DAC_OVERRIDE
#   - FOWNER
#   - SETGID
#   - SETUID

# ===========================================
# 文件和目录权限
# ===========================================

# 关键文件权限设置:
# /app/sage_mcp_stdio_single.py: 755 (可执行)
# /app/sage_core/: 755 (目录)
# /app/config/: 755 (目录)
# /var/log/sage/: 755 (日志目录)
# /var/lib/postgresql/data/: 700 (数据库数据)

# 敏感配置文件权限:
# .env: 600 (仅所有者可读写)
# 私钥文件: 600
# 配置文件: 644 (所有者可写，其他只读)

# ===========================================
# 网络安全配置
# ===========================================

# 1. 端口暴露策略:
# - 生产环境: 不暴露任何端口
# - 开发环境: 仅暴露必要端口到localhost

# 2. 防火墙配置:
# - 默认拒绝所有入站连接
# - 仅允许必要的出站连接
# - 限制SSH访问IP范围

# 3. TLS/SSL配置:
# - 数据库连接使用SSL
# - API通信使用HTTPS
# - 证书定期更新

# ===========================================
# 审计和监控
# ===========================================

# 1. 安全日志记录:
# - 登录尝试日志
# - 权限变更日志
# - 异常访问日志
# - 数据库操作日志

# 2. 定期安全检查:
# - 每周运行安全扫描
# - 检查文件权限变更
# - 监控异常进程
# - 审计用户权限

# 3. 告警设置:
# - 失败的登录尝试
# - 权限提升操作
# - 异常网络连接
# - 资源使用异常

# ===========================================
# 安全更新策略
# ===========================================

# 1. 基础镜像更新:
# - 定期更新Python基础镜像
# - 及时应用安全补丁
# - 监控CVE漏洞通告

# 2. 依赖更新:
# - 定期更新Python包
# - 检查已知安全漏洞
# - 使用dependabot等工具

# 3. 配置审核:
# - 定期审核安全配置
# - 检查权限设置
# - 验证加密设置

# ===========================================
# 事件响应计划
# ===========================================

# 1. 安全事件分类:
# - 低风险: 配置错误、权限异常
# - 中风险: 未授权访问尝试
# - 高风险: 数据泄露、系统入侵

# 2. 响应流程:
# - 立即隔离受影响系统
# - 收集和保存证据
# - 通知相关人员
# - 修复漏洞并恢复服务

# 3. 恢复验证:
# - 确认威胁已消除
# - 验证系统完整性
# - 更新安全策略
# - 总结经验教训

# ===========================================
# 合规性要求
# ===========================================

# 1. 数据保护:
# - 符合GDPR要求（如适用）
# - 数据分类和标记
# - 数据保留政策
# - 数据删除程序

# 2. 访问控制:
# - 最小权限原则
# - 定期权限审核
# - 多因素认证
# - 会话管理

# 3. 审计要求:
# - 完整的审计日志
# - 日志完整性保护
# - 定期合规检查
# - 第三方安全评估